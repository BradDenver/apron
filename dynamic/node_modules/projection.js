import   Dispatcher     from "dispatcher"
import { EventEmitter } from "events"

class Projection extends EventEmitter {
  constructor(NS) {
    this.NS = NS
  }

  broadcast()     {
    this.emit(this.NS)
  }

  subscribe(fn)   {
    this.on(this.NS, fn)
  }

  unsubscribe(fn) {
    this.removeListener(this.NS, fn)
  }

  register(acitonType, fn) {
    Dispatcher.register(payload => {
      if (payload.actionType !== actionType) return;
      if (fn && "function" === typeof fn) fn(payload.data, payload.actionType);

      const {paactionType, data} = payload;
      this.broadcast()
    });
  }

  derive(store, fn) {
    if (undefined === store.subscribe) return;

    store.subscribe(() => {
      if (fn && "function" === typeof fn) fn();
      this.broadcast()
    });
  }
}

export default Projection;
